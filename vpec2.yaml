---
- name: Setup Vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC Var
      include_vars: Variables/output_vars
    
    - name: Import Stack
      include_vars: Variables/stack-setup

    - name: Create ec2 key
       amazon.aws.ec2_key:
        name: key
        region: "{{region}}"
      register: key_out

    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{key_out.key.private_key}}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: key_out.changed

    - name: Create Securiry Group for Load Balancer
      amazon.aws.ec2_security_group:
        name: ELB-sg
        description: Allow port 80 from everywhere and all port within sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: ELBSG_out

    - name: Create Securiry Group for  Stack
      amazon.aws.ec2_security_group:
        name: Stack-sg
        description: Allow port 22 from everywhere and all port within sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ELBSG_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BasionSGid}}"
      register: StackSG_out

    - name: Update Securiry Group with its own sg id
      amazon.aws.ec2_security_group:
        name: Stack-sg
        description: Allow port 22 from everywhere and all port within sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{StackSG_out.group_id}}"

    - name: Creating Nginx web01
      amazon.aws.ec2_instance:
        key_name: key
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        resource_tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{StackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: web01_out

    - name: Creating tomcat app01
      amazon.aws.ec2_instance:
        key_name: key
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        resource_tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{StackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out

    - name: Creating memcache mc01
      amazon.aws.ec2_instance:
        key_name: key
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        resource_tags:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{StackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out

    - name: Creating RabbitMQ rmq01
      amazon.aws.ec2_instance:
        key_name: key
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        resource_tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{StackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out

    - name: Creating Mysql db01
      amazon.aws.ec2_instance:
        key_name: key
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        resource_tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        security_group: "{{StackSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out

    - debug:
        var: db01_out.instances[0]

    - local_action:
        module: amazon.aws.elb_application_lb
        name: "app-elb"
        region: "{{region}}"
        state: present
        security_groups: "{{ELBSG_out.group_id}}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward 
                TargetGroupArn: arn:aws:elasticloadbalancing:us-east-2:541242469625:targetgroup/ELb/66b1ed09305bebb2

    - name: Insert/Update Hosts IP & Name in file provision-stack/group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          web01_ip: {{ web01_out.instances[0].private_ip_address }}
          app01_ip: {{ app01_out.instances[0].private_ip_address}}
          rmq01_ip: {{ rmq01_out.instances[0].private_ip_address }}
          mc01_ip: {{ mc01_out.instances[0].private_ip_address }}
          db01_ip: {{ db01_out.instances[0].private_ip_address }}

    - name: Copy login key to provision_stack directory
      copy:
        src: loginkey_vpro.pem
        dest: provision-stack/loginkey_vpro.pem
        mode: '0400'

    - name: Insert/Update Inventory file provision-stack/inventory-vpro
      blockinfile:
        path: provision-stack/inventory
        block: |
          web01 ansible_host={{ web01_out.instances[0].private_ip_address }}
          app01 ansible_host={{ app01_out.instances[0].private_ip_address }}
          rmq01 ansible_host={{ rmq01_out.instances[0].private_ip_address }}
          mc01 ansible_host={{ mc01_out.instances[0].private_ip_address }}
          db01 ansible_host={{ db01_out.instances[0].private_ip_address }}
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
          #ansible_python_interpreter=/usr/bin/python3


